package Lesson13_Interface;
/*
 * Интерфейс (interface) определяет набор методов (или констант),
 * Которые должны быть реализованы классами, которые реализуют этот интерфейс.
 * Интерфейс в Java может быть использован, чтобы определить общий интерфейс для классов,
 * Не предоставляя при этом конкретной реализации.
 *
 * Условия интерфейса:
 * Все методы в интерфейсе должны быть public. Это означает, что классы, которые реализуют интерфейс, также должны реализовать все методы как public.
 * Методы в интерфейсе не могут содержать тела. Это означает, что классы, которые реализуют интерфейс, должны предоставить свою реализацию для каждого метода.
 * Интерфейс может расширять другой интерфейс. Это означает, что интерфейс может наследовать методы и условия другого интерфейса.
 * Интерфейс может содержать константы, которые автоматически являются public static final.
 * Класс, который реализует интерфейс, должен предоставить реализацию всех методов, определенных в интерфейсе либо быть абстрактным.
 * Класс может реализовать несколько интерфейсов. В этом случае класс должен предоставить реализацию всех методов, определенных в каждом интерфейсе.
 */

public class Lunch {
    interface lunch{
        void eat();
        void drink();
        final int cost = 200;
        /*
         * Default методы в Java интерфейсах - это методы, которые имеют реализацию по умолчанию внутри самого интерфейса.
         * Они были добавлены в Java 8 для обеспечения обратной совместимости в случае,
         * Eсли новый метод должен быть добавлен в существующий интерфейс.
         * Они могут быть не перезаписаны в имплементирующих интерфейс классах, тогда они будут наследовать его стандартную реализацию
         *
         * Условия для default метода:
         * Дефолтные методы могут иметь тело метода по умолчанию, которое определяется с помощью ключевого слова default.
         *
         * Дефолтные методы не могут быть объявлены как final, static или private. Они могут быть объявлены как abstract,
         * Но в этом случае они должны быть переопределены в классе, реализующем интерфейс.
         *
         * Дефолтные методы могут вызывать другие методы интерфейса с помощью ключевого слова this,
         * А также использовать ключевое слово super для вызова методов суперкласса.
         *
         * Дефолтные методы могут быть переопределены в классе, реализующем интерфейс,
         * Путем создания метода с тем же именем и сигнатурой, что и в интерфейсе.
         *
         * Если класс реализует несколько интерфейсов с одинаковыми дефолтными методами, то необходимо явно указать,
         * Какую реализацию использовать при вызове метода, используя синтаксис <Имя_интерфейса>.super.<имя_метода>().
         */
       default void smoke(){
            System.out.println("Smoke");
        }
        /*
         * Статический метод не будет унаследован из интерфейса в класс.
         * Все статик методы по умалочанию имеют access modifier public.
         * Статические методы не наследуются ни одним классом, который их имплементирует.
         * Для вызова статических методов использовать имя интерфейса.
         */
        static void football (){
            System.out.println("football");
        }
    }
}
